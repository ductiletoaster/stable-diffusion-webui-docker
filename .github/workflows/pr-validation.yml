name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/comfy/**'
      - 'docker-compose.yml'
      - '.env.example'
      - 'tests/**'
      - 'docs/**'
      - '.github/workflows/**'

jobs:
  # Quick validation for PRs
  quick-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate configuration files
        run: |
          echo "🔍 Validating configuration files..."
          
          # Docker Compose validation
          docker compose config --quiet
          echo "✅ Docker Compose syntax valid"
          
          # Profile validation
          docker compose --profile comfy config --services | grep -q comfy
          docker compose --profile comfy-cpu config --services | grep -q comfy-cpu
          echo "✅ Service profiles valid"
          
          # Environment file validation
          grep -q "COMFY_CLI_ARGS" .env.example
          echo "✅ Environment file valid"

      - name: Dockerfile syntax check
        run: |
          echo "🔍 Validating Dockerfile..."
          docker build --dry-run ./services/comfy || docker build -t test-build ./services/comfy
          echo "✅ Dockerfile syntax valid"

      - name: Test configuration validation
        run: |
          echo "🔍 Validating test configuration..."
          docker compose -f tests/docker-compose.test.yml config --quiet
          echo "✅ Test configuration valid"

  # Build validation
  build-validation:
    runs-on: ubuntu-latest
    needs: quick-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/comfy
          platforms: linux/amd64
          push: false
          load: true
          tags: comfy:pr-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Validate image contents
        run: |
          echo "🔍 Validating image contents..."
          
          # Check for required packages
          docker run --rm comfy:pr-test pip list | grep onnxruntime-gpu
          echo "✅ onnxruntime-gpu package found"
          
          # Check user setup
          docker run --rm comfy:pr-test whoami | grep comfy
          echo "✅ User setup correct"
          
          # Check entrypoint permissions
          docker run --rm comfy:pr-test ls -la /home/comfy/app/entrypoint.sh | grep rwx
          echo "✅ Entrypoint permissions correct"

  # Test suite validation
  test-validation:
    runs-on: ubuntu-latest
    needs: quick-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test container with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          file: tests/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: comfy-test-runner:pr
          cache-from: |
            type=gha,scope=test-runner-pr
          cache-to: |
            type=gha,mode=max,scope=test-runner-pr

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."

          # Run build tests (fastest) using cached container
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PROJECT_ROOT=/workspace \
            -e TESTS_DIR=/workspace/tests \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            comfy-test-runner:pr build
          echo "✅ Build tests passed"

          # Run environment tests
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PROJECT_ROOT=/workspace \
            -e TESTS_DIR=/workspace/tests \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            comfy-test-runner:pr env
          echo "✅ Environment tests passed"

      - name: Validate test coverage
        run: |
          echo "📊 Checking test coverage..."
          
          # Count test files
          test_files=$(find tests/ -name "test_*.py" | wc -l)
          echo "Found $test_files test files"
          
          # Ensure we have minimum test coverage
          [ "$test_files" -ge 5 ] || (echo "❌ Insufficient test files" && exit 1)
          echo "✅ Test coverage adequate"

  # Documentation validation
  docs-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate documentation
        run: |
          echo "📚 Validating documentation..."
          
          # Check required docs exist
          test -f docs/CPU_SUPPORT.md || (echo "❌ CPU_SUPPORT.md missing" && exit 1)
          test -f docs/TESTING_GUIDE.md || (echo "❌ TESTING_GUIDE.md missing" && exit 1)
          test -f README.md || (echo "❌ README.md missing" && exit 1)
          echo "✅ Required documentation files exist"
          
          # Check README mentions CPU support
          grep -qi "cpu" README.md || (echo "❌ README doesn't mention CPU support" && exit 1)
          echo "✅ README mentions CPU support"
          
          # Validate test documentation
          test -f docs/CONTAINERIZED_TESTING.md || (echo "❌ CONTAINERIZED_TESTING.md missing" && exit 1)
          echo "✅ Test documentation valid"

  # Security check
  security-check:
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx for security scan
        uses: docker/setup-buildx-action@v3

      - name: Build image for security scan with cache
        uses: docker/build-push-action@v5
        with:
          context: ./services/comfy
          platforms: linux/amd64
          push: false
          load: true
          tags: comfy:security-scan
          cache-from: |
            type=gha,scope=security-scan-pr
          cache-to: |
            type=gha,mode=max,scope=security-scan-pr

      - name: Run basic security checks
        run: |
          echo "🔒 Running security checks..."
          
          # Check for non-root user
          docker run --rm comfy:security-scan whoami | grep -v root
          echo "✅ Running as non-root user"
          
          # Check for secrets in image
          ! docker run --rm comfy:security-scan env | grep -i password
          ! docker run --rm comfy:security-scan env | grep -i secret
          ! docker run --rm comfy:security-scan env | grep -i token
          echo "✅ No obvious secrets in environment"

  # PR summary
  pr-summary:
    runs-on: ubuntu-latest
    needs: [quick-validation, build-validation, test-validation, docs-validation, security-check]
    if: always()
    
    steps:
      - name: PR Validation Summary
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              'quick-validation': '${{ needs.quick-validation.result }}',
              'build-validation': '${{ needs.build-validation.result }}',
              'test-validation': '${{ needs.test-validation.result }}',
              'docs-validation': '${{ needs.docs-validation.result }}',
              'security-check': '${{ needs.security-check.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            let summary = `## 🔍 PR Validation Results\n\n`;
            summary += `**${passed}/${total} checks passed**\n\n`;
            
            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
              summary += `${emoji} ${check.replace('-', ' ')}: ${result}\n`;
            }
            
            if (passed === total) {
              summary += `\n🎉 All validation checks passed! This PR is ready for review.`;
            } else {
              summary += `\n⚠️ Some validation checks failed. Please review and fix the issues.`;
            }
            
            // Add comment to PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
