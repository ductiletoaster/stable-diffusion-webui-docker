name: Maintenance and Monitoring

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of maintenance check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - security

jobs:
  # Check for dependency updates
  dependency-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'dependencies' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PyTorch base image updates
        id: pytorch-check
        run: |
          echo "🔍 Checking for PyTorch base image updates..."
          
          # Get current version from Dockerfile
          current_version=$(grep "ARG PYTORCH_VERSION" services/comfy/Dockerfile | cut -d'=' -f2)
          echo "Current PyTorch version: $current_version"
          
          # Check Docker Hub for latest tags (simplified check)
          echo "pytorch_version=$current_version" >> $GITHUB_OUTPUT

      - name: Check Python dependencies
        run: |
          echo "🔍 Checking Python dependencies in test requirements..."
          
          # Build image and check for outdated packages
          docker build -t comfy:dep-check ./services/comfy
          docker run --rm comfy:dep-check pip list --outdated || true

      - name: Check for security updates
        run: |
          echo "🔒 Checking for security updates..."
          
          # Build image for security scanning
          docker build -t comfy:security-check ./services/comfy
          
          # Run basic security audit
          docker run --rm comfy:security-check pip audit || true

      - name: Create dependency update issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔄 Weekly Dependency Update Check - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## 📦 Dependency Update Check
            
            This is an automated weekly check for dependency updates.
            
            ### 🔍 Checked Components
            - [x] PyTorch base image
            - [x] Python packages
            - [x] Security vulnerabilities
            
            ### 📋 Action Items
            - [ ] Review outdated packages
            - [ ] Test compatibility with new versions
            - [ ] Update Dockerfile if needed
            - [ ] Run full test suite
            
            ### 🤖 Automation
            This issue was created automatically by the maintenance workflow.
            `;
            
            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'maintenance,dependencies',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['maintenance', 'dependencies']
              });
            }


  # Security monitoring
  security-monitoring:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build security test image
        run: |
          docker build -t comfy:security-test ./services/comfy

      - name: Run comprehensive security scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'comfy:security-test'
          format: 'json'
          output: 'security-scan.json'

      - name: Analyze security results
        run: |
          echo "🔒 Analyzing security scan results..."
          
          # Count vulnerabilities by severity
          high_vulns=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-scan.json)
          critical_vulns=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-scan.json)
          
          echo "Critical vulnerabilities: $critical_vulns"
          echo "High vulnerabilities: $high_vulns"
          
          # Create alert if critical vulnerabilities found
          if [ "$critical_vulns" -gt 0 ]; then
            echo "⚠️ CRITICAL vulnerabilities found!"
            echo "create_security_alert=true" >> $GITHUB_ENV
          fi

      - name: Create security alert
        if: env.create_security_alert == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 CRITICAL Security Vulnerabilities Detected',
              body: `
              ## 🚨 Security Alert
              
              Critical security vulnerabilities have been detected in the ComfyUI Docker image.
              
              ### 🔍 Scan Results
              - Scan Date: ${new Date().toISOString()}
              - Scanner: Trivy
              
              ### 📋 Action Required
              - [ ] Review security scan results
              - [ ] Update vulnerable dependencies
              - [ ] Rebuild and test image
              - [ ] Deploy security fixes
              
              ### 📎 Artifacts
              Check the workflow run for detailed scan results.
              `,
              labels: ['security', 'critical', 'bug']
            });

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: security-scan.json



  # Generate maintenance report
  generate-report:
    runs-on: ubuntu-latest
    needs: [dependency-check, security-monitoring]
    if: always() && (github.event.inputs.check_type == 'all' || github.event_name == 'schedule')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate maintenance report
        run: |
          echo "# 🔧 Maintenance Report - $(date)" > maintenance-report.md
          echo "" >> maintenance-report.md
          echo "## 📊 Summary" >> maintenance-report.md
          echo "" >> maintenance-report.md
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> maintenance-report.md
          echo "- Security Monitoring: ${{ needs.security-monitoring.result }}" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          echo "## 🤖 Automation" >> maintenance-report.md
          echo "" >> maintenance-report.md
          echo "This report was generated automatically by the maintenance workflow." >> maintenance-report.md

      - name: Upload maintenance report
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report
          path: maintenance-report.md

      - name: Comment on latest commit
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('maintenance-report.md', 'utf8');
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `🔧 **Weekly Maintenance Report**\n\n${report}`
            });
