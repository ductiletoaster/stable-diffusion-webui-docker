name: Release and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'latest'
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/comfy

jobs:
  # Full test suite before release
  pre-release-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Docker Buildx for test container
        uses: docker/setup-buildx-action@v3

      - name: Build test container with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          file: tests/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: comfy-test-runner:release
          cache-from: |
            type=gha,scope=test-runner-release
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/test-runner:cache
          cache-to: |
            type=gha,mode=max,scope=test-runner-release

      - name: Run comprehensive test suite
        run: |
          echo "🧪 Running full test suite..."
          # Use the cached test container image
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e PROJECT_ROOT=/workspace \
            -e TESTS_DIR=/workspace/tests \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            comfy-test-runner:release all --verbose
          echo "✅ All tests passed"

      - name: Performance validation
        run: |
          echo "⚡ Running performance validation..."
          
          # Start CPU service and measure startup time
          start_time=$(date +%s)
          COMFY_CLI_ARGS="--cpu" docker compose --profile comfy-cpu up -d
          
          # Wait for service to be ready
          timeout 180 bash -c 'until curl -f http://localhost:8189 >/dev/null 2>&1; do sleep 5; done'
          
          end_time=$(date +%s)
          startup_time=$((end_time - start_time))
          echo "CPU service startup time: ${startup_time}s"
          
          # Basic API performance test
          time curl -s http://localhost:8189/system_stats >/dev/null
          
          # Memory usage check
          docker stats --no-stream comfy-cpu
          
          # Cleanup
          docker compose down
          echo "✅ Performance validation completed"

  # Build and publish multi-platform images
  build-and-publish:
    runs-on: ubuntu-latest
    needs: pre-release-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/comfy
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.push_to_registry != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate SBOM
        if: github.event.inputs.push_to_registry != 'false'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: github.event.inputs.push_to_registry != 'false'
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Security scanning for release
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.event.inputs.push_to_registry != 'false'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "## Trivy Vulnerability Scan" >> security-report.md
          echo "" >> security-report.md
          
          # Run Trivy in table format for the report
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --format table \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

  # Integration tests with published image
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.event.inputs.push_to_registry != 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test published image
        run: |
          echo "🧪 Testing published image..."
          
          # Update docker-compose to use published image
          sed -i "s|build: ./services/comfy/|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" docker-compose.yml
          
          # Test CPU mode
          COMFY_CLI_ARGS="--cpu" docker compose --profile comfy-cpu up -d
          timeout 180 bash -c 'until curl -f http://localhost:8189 >/dev/null 2>&1; do sleep 5; done'
          curl -f http://localhost:8189
          docker compose down
          
          # Test GPU mode (will run in CPU mode on CI)
          docker compose --profile comfy up -d
          timeout 180 bash -c 'until curl -f http://localhost:8188 >/dev/null 2>&1; do sleep 5; done'
          curl -f http://localhost:8188
          docker compose down
          
          echo "✅ Published image integration tests passed"

  # Create release notes
  create-release-notes:
    runs-on: ubuntu-latest
    needs: [pre-release-tests, build-and-publish, security-scan, integration-tests]
    if: always() && github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release-notes
        run: |
          echo "# ComfyUI Docker Release ${{ github.event.release.tag_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## 🚀 What's New" >> release-notes.md
          echo "" >> release-notes.md
          echo "- ✅ CPU-only mode support with automatic fallback" >> release-notes.md
          echo "- ✅ Unified Docker image using onnxruntime-gpu" >> release-notes.md
          echo "- ✅ Simplified build process and improved caching" >> release-notes.md
          echo "- ✅ Comprehensive test suite and CI/CD pipeline" >> release-notes.md
          echo "" >> release-notes.md
          echo "## 📦 Docker Images" >> release-notes.md
          echo "" >> release-notes.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}\`" >> release-notes.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "## 🔧 Usage" >> release-notes.md
          echo "" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "# GPU mode" >> release-notes.md
          echo "docker compose --profile comfy up -d" >> release-notes.md
          echo "" >> release-notes.md
          echo "# CPU mode" >> release-notes.md
          echo "docker compose --profile comfy-cpu up -d" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "## 📚 Documentation" >> release-notes.md
          echo "" >> release-notes.md
          echo "- [CPU Support Guide](docs/CPU_SUPPORT.md)" >> release-notes.md
          echo "- [Testing Guide](docs/TESTING_GUIDE.md)" >> release-notes.md
          echo "" >> release-notes.md
          echo "## ✅ Validation" >> release-notes.md
          echo "" >> release-notes.md
          echo "- All tests passed: ${{ needs.pre-release-tests.result }}" >> release-notes.md
          echo "- Build successful: ${{ needs.build-and-publish.result }}" >> release-notes.md
          echo "- Security scan: ${{ needs.security-scan.result }}" >> release-notes.md
          echo "- Integration tests: ${{ needs.integration-tests.result }}" >> release-notes.md

      - name: Update release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              body: releaseNotes
            });

  # Notify on completion
  notify-completion:
    runs-on: ubuntu-latest
    needs: [pre-release-tests, build-and-publish, security-scan, integration-tests]
    if: always()
    
    steps:
      - name: Notify completion
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              'pre-release-tests': '${{ needs.pre-release-tests.result }}',
              'build-and-publish': '${{ needs.build-and-publish.result }}',
              'security-scan': '${{ needs.security-scan.result }}',
              'integration-tests': '${{ needs.integration-tests.result }}'
            };
            
            const allPassed = Object.values(results).every(r => r === 'success');
            const emoji = allPassed ? '🎉' : '⚠️';
            const status = allPassed ? 'completed successfully' : 'completed with issues';
            
            console.log(`${emoji} Release workflow ${status}`);
            
            // Create a commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: allPassed ? 'success' : 'failure',
              description: `Release workflow ${status}`,
              context: 'Release Pipeline'
            });
