name: ComfyUI Docker CI/CD

on:

  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - reopened
      - synchronize

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/comfy

jobs:
  # Validate configuration files
  validate-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate configuration files
        run: |
          echo "🔍 Validating configuration files..."
          
          # Docker Compose validation
          docker compose config --quiet
          echo "✅ Docker Compose syntax valid"
          
          # Profile validation
          docker compose --profile comfy config --services | grep -q download
          docker compose --profile comfy config --services | grep -q auto
          docker compose --profile comfy config --services | grep -q comfy
          echo "✅ Service profiles valid"
          
          # Environment file validation
          grep -q "COMFY_CLI_ARGS" .env.example
          echo "✅ Environment file valid"

  # Build and test Docker image
  build-and-test:
    runs-on: ubuntu-latest
    needs: validate-config
    strategy:
      matrix:
        profile: [comfy, comfy-cpu]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test image packages
        run: |
          # Verify onnxruntime-gpu is installed
          docker run --rm comfy:test pip list | grep onnxruntime-gpu
          echo "✅ onnxruntime-gpu package verified"

      - name: Test image structure
        run: |
          # Verify for entrypoint location
          docker run --rm comfy:test ls -la /home/comfy/app/entrypoint.sh | grep rwx
          echo "✅ Image structure verified"

      - name: Run basic security checks
        run: |
          echo "🔒 Running security checks..."
          
          # Check for non-root user
          docker run --rm comfy:test whoami | grep -v root
          echo "✅ Running as non-root user"
          
          # Check for secrets in image
          ! docker run --rm comfy:test env | grep -i password
          ! docker run --rm comfy:test env | grep -i secret
          ! docker run --rm comfy:test env | grep -i token
          echo "✅ No obvious secrets in environment"

      - name: Test service startup (CPU mode)
        if: matrix.profile == 'comfy-cpu'
        run: |
          # Start CPU service
          COMFY_CLI_ARGS="--cpu" docker compose --profile comfy-cpu up -d
          
          # Wait for service to be ready
          timeout 120 bash -c 'until curl -f http://localhost:8189 >/dev/null 2>&1; do sleep 5; done'
          
          # Verify service is responding
          curl -f http://localhost:8189
          
          # Check logs for CPU mode indicator
          docker compose logs comfy-cpu | grep -i "cpu"
          
          # Cleanup
          docker compose down
          echo "✅ CPU service startup verified"

      - name: Test service startup (GPU mode)
        if: matrix.profile == 'comfy'
        run: |
          # Start GPU service (will run in CPU mode on CI)
          docker compose --profile comfy up -d
          
          # Wait for service to be ready
          timeout 120 bash -c 'until curl -f http://localhost:8188 >/dev/null 2>&1; do sleep 5; done'
          
          # Verify service is responding
          curl -f http://localhost:8188
          
          # Cleanup
          docker compose down
          echo "✅ GPU service startup verified"

  # PR summary
  pr-summary:
    runs-on: ubuntu-latest
    needs: [validate-config, build-and-test]
    if: always()
    
    steps:
      - name: PR Validation Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'validate-config': '${{ needs.validate-config.result }}',
              'build-and-test': '${{ needs.build-and-test.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            let summary = `## 🔍 PR Validation Results\n\n`;
            summary += `**${passed}/${total} checks passed**\n\n`;
            
            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
              summary += `${emoji} ${check.replace('-', ' ')}: ${result}\n`;
            }
            
            if (passed === total) {
              summary += `\n🎉 All validation checks passed! This PR is ready for review.`;
            } else {
              summary += `\n⚠️ Some validation checks failed. Please review and fix the issues.`;
            }
            
            // Add comment to PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
