name: ComfyUI Docker CI/CD

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'services/**'
      - '.env.example'
      - 'docker-compose.yml'
      - 'docker-bake.hcl'
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  # Validate configuration files
  validate-config:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate configuration files
        run: |
          echo "🔍 Validating configuration files..."
          
          # Profile validation
          docker compose --profile comfy-setup config --services | grep -q comfy-setup
          docker compose --profile comfy config --services | grep -q comfy
          echo "✅ Service profiles valid"
          
          # Environment file validation
          grep -q "PUID" .env.example
          grep -q "PGID" .env.example
          echo "✅ Environment file valid"
          
          # Docker Bake validation
          docker buildx bake --file docker-bake.hcl --print
          echo "✅ Docker Bake configuration valid"

      - name: Clean up Docker
        run: docker system prune -a -f

  # Build all images using Docker Bake
  build-images:
    runs-on: ubuntu-22.04
    needs: validate-config
    strategy:
      matrix:
        # Build different groups based on the event
        include:
          - event: pull_request
            group: all
            description: "All images (PR)"
          - event: push
            group: all
            description: "All images (Push)"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/runtime-nvidia
            ghcr.io/${{ github.repository }}/runtime-cpu
            ghcr.io/${{ github.repository }}/comfy-nvidia
            ghcr.io/${{ github.repository }}/comfy-cpu
            ghcr.io/${{ github.repository }}/comfy-setup
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push with Docker Bake
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-bake.hcl
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          targets: ${{ matrix.group }}
          cache-from: |
            type=gha,scope=bake-${{ matrix.group }}
            type=registry,ref=ghcr.io/${{ github.repository }}/runtime-nvidia:cache
            type=registry,ref=ghcr.io/${{ github.repository }}/runtime-cpu:cache
            type=registry,ref=ghcr.io/${{ github.repository }}/comfy-nvidia:cache
            type=registry,ref=ghcr.io/${{ github.repository }}/comfy-cpu:cache
            type=registry,ref=ghcr.io/${{ github.repository }}/comfy-setup:cache
          cache-to: |
            type=gha,mode=max,scope=bake-${{ matrix.group }}
            type=inline

      - name: Clean up Docker
        run: docker system prune -a -f

  # PR summary
  pr-summary:
    runs-on: ubuntu-latest
    needs: [validate-config, build-images]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: PR Validation Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'validate-config': '${{ needs.validate-config.result }}',
              'build-images': '${{ needs.build-images.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            let summary = `## 🔍 PR Validation Results\n\n`;
            summary += `**${passed}/${total} checks passed**\n\n`;
            
            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
              summary += `${emoji} ${check.replace('-', ' ')}: ${result}\n`;
            }
            
            if (passed === total) {
              summary += `\n🎉 All validation checks passed! This PR is ready for review.`;
            } else {
              summary += `\n⚠️ Some validation checks failed. Please review and fix the issues.`;
            }
            
            // Add comment to PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
